---
title: "Tornado analytics: damage path characteristics & clusters"
format: 
  revealjs:
    code-fold: false
    theme: white
    footer: "GEO4251 Climate Change & Storms"
    chalkboard: true
editor: source
---

##

-   Lesson 24 today and Lesson 25 (lab) next Monday (April 24)
-   As noted in the syllabus, I'm traveling this week so there is no class on Wednesday (April 19)
-   Final lesson (this will be optional) next Wednesday (April 26)
-   Today: Continue with tornado analytics. Focus is on (1) path characteristics and (2) clustering
-   Start by looking at the relationship between the damage rating and the length of the damage path

##  {.smaller}

-   The tornado records file (`Tornadoes.csv`) in the `data` directory (if not, see Lesson 23)
-   Import the file as a data frame using the `readr::read_csv()` function and then preview it with the `head()` function

```{r}
#| echo: true
Torn.df <- readr::read_csv(file = here::here("data", "Tornadoes.csv"))

Torn.df |>
  head()
```

-   Each row is a separate tornado report. Observations in each report include the day and time, the state (`st`), the maximum EF rating (`mag`), the number of injuries (`inj`), the number of fatalities (`fat`), start and end locations in decimal degrees longitude and latitude, length of the damage path in miles (`len`), width of the damage in yards (`wid`)

##

-   All tornadoes versus EF1+ tornadoes

```{r}
library(ggplot2)

Torn.df |>
  dplyr::filter(mag >= 1) |>
  dplyr::group_by(yr) |>
  dplyr::summarize(nT = dplyr::n()) |>
  ggplot(mapping = aes(x = yr, y = nT)) +
  geom_line()
```

-   For comparison, add a `dplyr::filter(mag >= 1) |>` line in the code

##

-   Create a subset of the data frame containing only tornadoes in the years (`yr`) since 2007 (EF rating implemented). You do this by including the logical operator `yr >= 2007` inside the `dplyr::filter()` function

```{r}
#| echo: true
Torn2.df <- Torn.df |>
  dplyr::filter(yr >= 2007)

Torn2.df |>
  dim()
```

## {.smaller}

-   Now subset again, keeping only tornadoes with EF ratings (`mag` variable) greater than zero and path length greater than a hundredth of a mile. Note that you reuse the name `Torn2.df`

```{r}
#| echo: true
Torn2.df <- Torn2.df |>
  dplyr::filter(mag > 0, len > .01)
```

-   Now you compute the correlation between EF rating (`mag`) and path length (`len`) with the `cor()` function

```{r}
#| echo: true
cor(Torn2.df$mag, Torn2.df$len) |>
  round(digits = 3)
```

-   How do you interpret this value? Statistically and physically
-   Is it significant in the statistical sense?

```{r}
cor.test(Torn2.df$mag, Torn2.df$len)
```




## 

-   Path length is recorded in miles and path width in yards and the EF damage rating variable `mag` is numeric
-   Convert path length to kilometers, path width to meters, and the EF rating to a factor and include these changes as new columns in the data frame

```{r}
#| echo: true
Torn2.df <- Torn2.df |>
  dplyr::mutate(Length = len * 1.60934,
                Width = wid * .9144,
                EF = factor(mag))
```

##

-   Create violin plots of path length by EF rating

```{r}
#| echo: true
#| output-location: slide
#| fig-width: 6
#| fig-height: 6
library(ggplot2)

ggplot(data = Torn2.df,
       mapping = aes(y = EF, x = Length)) +
  geom_violin(draw_quantiles = .5, size = 1, fill = "#0000ff") +
  geom_point(size = .1, color = "#ffff00") +
  scale_x_log10(breaks = c(.1, 1, 10, 100),
                labels = c(".1 km", "1 km", "10 km", "100 km")) +
  scale_y_discrete(labels = c("EF1", "EF2", "EF3", "EF4", "EF5")) +
  labs(x = "", y = "", title = "Tornado damage rating depends on path length")
```

##

-   Changes in average path characteristics by year

```{r}
Torn2.df |>
  dplyr::filter(mag >= 2) |>
  dplyr::group_by(yr) |>
  dplyr::summarize(nT = dplyr::n(),
                   Lavg = mean(Length),
                   Wavg = mean(Width),
                   Lq = quantile(Length, probs = .9),
                   Wq = quantile(Width, probs = .9)) |>
  ggplot(mapping = aes(x = yr, y = Lavg)) +
  geom_point() +
  geom_smooth(method = lm)
```

-   Other quantiles and more damaging tornadoes


## 

-   Tracks as spatial lines
-   Download the data and put it into the folder called `data`

```{r}
#| echo: true
L <- "http://www.spc.noaa.gov/gis/svrgis/zipped/1950-2021-torn-aspath.zip"

download.file(url = L,
              destfile = here::here("data", "1950-2021-torn-aspath.zip"))

unzip(zipfile = here::here("data", "1950-2021-torn-aspath.zip"), 
      exdir = here::here("data"))
```

##

-   Get the data into your R session

```{r}
#| echo: true
Torn3.sf <- sf::st_read(dsn = here::here("data", "1950-2021-torn-aspath"), 
                        layer = "1950-2021-torn-aspath") 
```

The geometry type is line string representing the straight-line approximate track of each tornado. The coordinate reference system (CRS) is WGS84

##

-   Plot the 2011 Tuscaloosa-Birmingham tornado track

```{r}
#| echo: true
#| output-location: slide
Birmingham_Track.sf <- Torn3.sf |>
  dplyr::filter(date == "2011-04-27" & mag == 4 & st == "AL", fat == 64)

tmap::tmap_mode("view")
tmap::tm_shape(Birmingham_Track.sf) +
  tmap::tm_lines(lwd = 3)
```
##

![Birmingham, AL tornado](figures/BirminghamDamagePath.jpg)

## Outbreaks

-   Tornadoes come in bunches called 'outbreaks'
-   End of March

<https://www.spc.noaa.gov/climo/reports/230331_prt_rpts.html>

##

-   Count the number of tornadoes (damage rating 1 or worse) reported in each day since 1950

```{r}
#| echo: true
DailyCount.df <- Torn.df |>
  dplyr::filter(mag >= 1) |>
  dplyr::group_by(date) |>
  dplyr::summarize(nT = dplyr::n(),
                   Year = dplyr::last(yr))

DailyCount.df |>
  head()
```

## {.smaller}

-   Count the number of days with at least N tornadoes. Start with N = 10
-   Also compute the proportion of all tornadoes occurring in days with at least N tornadoes

```{r}
#| echo: true
N <- 10
AnnualCount.df <- DailyCount.df |>
  dplyr::mutate(BigDay = nT >= N) |>
  dplyr::group_by(Year) |>
  dplyr::summarize(ALL_T = sum(nT),
                   NBD = sum(BigDay),
                   NBD_T = sum(nT[BigDay])) |>
  dplyr::mutate(Proportion = NBD_T / ALL_T)
```

-   View the data frame `AnnualCount.df`
-   Make a time series plot

```{r}
#| echo: true
ggplot(data = AnnualCount.df,
       mapping = aes(x = Year, y = Proportion)) +
  geom_point() +
  geom_smooth(method = lm) +
  labs(title = "Proportion of all tornadoes occurring on days with at least 10 tornadoes")
```

-   Update from a paper I published in 2014 <https://myweb.fsu.edu/jelsner/PDF/Research/ElsnerElsnerJagger2015.pdf>

## 

-   Tornadoes and climate change: more clusters

{{< video https://www.youtube.com/embed/jqzU9ECKP5A >}} 45 minutes


## {.smaller}

-   Tornado damage paths from Google Earth

{{< video https://www.youtube.com/embed/jcIR9Hl62yo >}} 22 minutes

-   Damage assessment toolkit

<https://apps.dat.noaa.gov/stormdamage/damageviewer/>

-   Other severe local storm data

<https://mesonet.agron.iastate.edu/request/gis/lsrs.phtml>