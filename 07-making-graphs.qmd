---
title: "Graphing your data"
format: 
  revealjs:
    code-fold: false
    theme: simple
    footer: "GEO4251 Climate Change & Storms"
    chalkboard: true
editor: source
---

##

-   Reflections on lab 1
-   Lab 2 is next Monday (February 13)
-   It will cover material from Lessons 7 & 8
-   Today: graphing climate data
-   Getting help from AI

## 

-   Climate is a data-generating machine
-   Graphs of observed data help us understand processes within the climate machine
-   The relationships between observed increases in ocean temperature and storminess
-   Collections of observed data reflect our view about climate change
-   Everything that is counted does not necessarily count
-   Accumulated cyclone energy (ACE)

##

-   How to think about graphing data
-   The {ggplot2} package has graph-making functions rooted in visualization theory
-   The theory is called the grammar of graphics
-   A graph maps variables (columns in your data frame) to attributes (aesthetics) of geometric objects
-   A graph requires data (`data.frame`), a geometric object like a point (`geom_point`) or a line (`geom_line`), and a set of aesthetics like location, color shape, and size

##

-   Monthly rain amount (inches) in northwestern Florida
-   Data are in the file `NWFL_MonthlyRain.txt` in directory `data`
-   Get the data into your current R session as a data frame called `Rain.df`
-   View the data frame

```{r}
#| echo: true
L <- here::here("data", "NWFL_MonthlyRain.txt")
Rain.df <- readr::read_table(file = L,
                             show_col_types = FALSE)
```

## 

```{r}
#| echo: true
library(ggplot2)

ggplot(data = Rain.df, 
       mapping = aes(x = Year, y = Mar)) +
  geom_line() +
  ylab("Inches") +
  ggtitle(label = "March rain amounts in northwestern Florida",
          subtitle = "1895-2021")
```

##  {.smaller}

```{r}
#| echo: true
ggplot(data = Rain.df, 
       mapping = aes(x = Year, y = Mar)) +
  geom_line() +
  ylab("Inches") +
  ggtitle(label = "March rain amounts in northwestern Florida",
          subtitle = "1895-2021")
```

-   The data frame is `Rain.df`
-   The data column `Year` gets mapped to the `x` position aesthetic of the line
-   The data column `Mar` gets mapped to the `y` position aesthetic of the line
-   The `geom_line()` describes the geometric object as a line

## 

```{r}
#| echo: true
#| code-line-numbers: 2-3
ggplot(data = Rain.df, 
       mapping = aes(x = Year, y = Mar, color = Mar)) +
  scale_x_continuous(breaks = seq(1900, 2020, 20)) +
  geom_point() +
  ylab("Inches") +
  ggtitle(label = "March rain amounts in northwestern Florida",
          subtitle = "1895-2021")
```

## Scatter plot

-   The scatter plot is perhaps the most useful scientific graph
-   It maps one variable to the `x` aesthetic and another variable to the `y` aesthetic
-   Here you create a scatter plot mapping January rain to the `x` aesthetic and May rain to the `y` aesthetic

```{r}
#| echo: true
#| output-location: slide
#| code-line-numbers: 1-3,6-9
#| fig-width: 6
#| fig-height: 6
ggplot(data = Rain.df, 
       mapping = aes(x = Jan, y = May)) +
  geom_point(color = "red") +
  scale_x_continuous(limits = c(0, 17)) +
  scale_y_continuous(limits = c(0, 17)) +
  xlab("January Rain (in)") + 
  ylab("May Rain (in)") +
  ggtitle(label = "January vs May rain amounts in northwestern Florida",
          subtitle = "Do you see a relationship? Can you think of a cause?")
```

## Histogram

```{r, eval=FALSE}
ggplot(data = Rain.df,
       mapping = aes(x = Jan, y = 0)) +
  geom_point(color = "green") +
  scale_y_continuous(limits = c(0, 1)) +
  xlab("Rain (in)")
```

![January rainfall (in) in NW Florida 1895-2021](figures/JanuaryRain.png){fig-alt="January rainfall (in) in NW Florida 1895-2021"}

```{r}
#| echo: true
#| fig-height: 3
ggplot(data = Rain.df,
       mapping = aes(x = Jan)) +
  geom_histogram(bins = 12, fill = "darkgreen", color = "gray") +
  xlab("Rain (in)")
```

## Small multiples

-   Suppose you want a histogram of rain for each month of the year all on the same graph
-   First convert the data frame from a wide format to a long format with the `tidyr::pivot_longer()` function

```{r}
#| echo: true
RainL.df <- Rain.df |>
  tidyr::pivot_longer(cols = 2:13, 
                      names_to = "Month", 
                      values_to = "Rain_in") |>
  dplyr::mutate(Month = factor(Month, levels = month.abb))
```

-   Compare `RainL.df` with `Rain.df` using `View()`

##

-   Second include `facet_wrap()` as part of the plot code

```{r}
#| echo: true
#| code-line-numbers: 1-2,5
ggplot(data = RainL.df,
       mapping = aes(x = Rain_in)) +
  geom_histogram(bins = 12, fill = "darkgreen", color = "gray") +
  xlab("Rain (in)") +
  facet_wrap(~ Month)
```

-   Cheat sheets: <https://www.rstudio.com/resources/cheatsheets/>

## Getting help from AI

-   <https://chat.openai.com/chat>
-   Ask it to write code to make a scatter plot in R
-   Copy/paste the generated code into your Console
-   Good? Now ask it to write code to make a time series plot
-   Copy/paste the code into your Console 

##

-   Changes in rainfall over long periods of time

{{< video https://www.youtube.com/embed/9XVr2KGR9s0 >}} 2:11 minutes
